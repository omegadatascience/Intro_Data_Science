# Mostra os demais espaços.
search()
# Lista o conteúdo de um espaço.
ls("package:datasets")
women
# Mostra o .GlobalEnv.
ls()
# Mostra os demais espaços.
search()
# Lista o conteúdo de um espaço.
ls("package:datasets")
# O que acontece se eu fizer?
women <- c("Gertrude Mary Cox",
"Florence Nightingale David")
women
# Está no .GlobalEnv.
datasets::women # Está no pacote.
#Duas formas iguais de chamar
# a documentação.
?woman
#Duas formas iguais de chamar
# a documentação.
??woman
help(woman)
# Procura por ocorrêncians de `women`.
help.search("woman")
# Objetos que batem com o termo.
apropos("tukey")
# Exibe as vinhetas de um pacote.
browseVignettes(package = "survival")
install.package("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
n <- 3
n <- 3
tb1 <- tibble("trat" = LETTERS[1:n],
aval1 = rpois(n, 4),
aval2 = rpois(n, 4),
aval3 = rpois(n, 4))
library(tidyverse)
n <- 3
tb1 <- tibble("trat" = LETTERS[1:n],
aval1 = rpois(n, 4),
aval2 = rpois(n, 4),
aval3 = rpois(n, 4))
tb1
women
# Mostra o `.GlobalEnv`.
ls()
# Mostra os demais espaços.
search()
# Lista o conteúdo de um espaço.
ls("package:datasets")
woman
#Duas formas iguais de chamar
# a documentação.
?iris
#Duas formas iguais de chamar
# a documentação.
?iris
help(iris)
# Procura por ocorrêncians de `women`.
help.search("iris")
df1 %>%
summarise_at(vars(prova1:prova3, faltas),
.funs = c("mean",
"sd",
"CV"),
na.rm = TRUE) %>%
glimpse()
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_ecdf()
---
title: 'Módulo 3'
output:
html_document:
toc: true
#toc_depth: 3
#toc_float:
#  collapsed: true
# smooth_scroll: true
number_sections: true
#theme: flatly
#spacelab
#default,cerulean,journal,flatly,readable,spacelab,
#united,cosmo,lumen,paper,sandstone,simplex,yeti
#highlight: espresso
#default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, and textmate
#css: styles.css
#fig_width: 7
#fig_height: 6
#fig_caption: true
#fig_align: 'center'
#code_folding: hide
#    keep_md: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
fig.align='center')
```
---
# Visualização de dados com {ggplot2}
O uso de técnicas de visualização é frequente para fins de exploração, reconhecimento de padrões, estruturas, relações entre variáveis, avaliação de suposições de modelos estatísticos e na comunicação de resultados importantes de uma análise.
Quando o assunto é visualização de dados usando R, precisamos mencionar três bibliotecas importantes: `graphics`, `lattice` e `ggplot2`. O `graphics` é um pacote básico e mais primitivo para visualização em R; é muito útil porém limitado para algumas tarefas. O `lattice` foi uma das primeiras bibliotecas especializadas em gráficos que surgiu como alternativa ao `graphics`; tamanho foi seu sucesso que hoje faz parte do grupo de pacotes recomendados do R, ou seja, ao instalar o R, o `lattice` será instalado automaticamente. Já o `ggplot2` é uma alternativa mais moderna; sua sintaxe é baseada na chamada Gramática dos Gráficos em que usam-se camadas para a inclusão de elementos gráficos.
Outro tópico interessante é a visualização interativa. Tratam-se de gráficos que apresentam recursos extra ao usuário como alguma reação quando o cursor do mouse passa por pontos, opções de filtragem, zoom em áreas específicas, etc. Em geral, este tipo de visualização é usada para relatórios a serem disponibilizados na web. Alguns dos pacotes para visualização interativa são: `plotly`, `highcharter`, `googleVis`, `rCharts`, `leaflet`, `iplots`, `rgl` e `animation`. Para verificar possibilidades de gráficos que podem ser gerados em R consulte o [R Graph Gallery](https://www.r-graph-gallery.com/).
---
## Um overview do {ggplot2}
O `ggplot2` é a implementação computacional em R das ideias do livro "The Grammar of Graphics" de Leland Wilkinson. A ideia é que visualizações podem ser desenvolvidas por meio de camadas. As camadas usadas são:
- Dados: onde define-se o tipo de valor e dimensões de escala.
- Variáveis visuais: define o mapeamento em variáveis visuais e controle das escalas.
- Geometrias: qual(is) representações geométricas serão usadas.
- Facetas: de que forma a visualização será dividida para exibição.
- Estatísticas: elementos de estatística ou valores calculados a serem exibidos.
- Coordenadas: sistema de coordenadas a ser usado.
- Tema: cores, demarcações, fontes, legendas, etc.
A função central do pacote é a `ggplot()`, dentro dessa função declaramos o conjunto de dados, as variáveis que queremos representar e de que forma. A partir daí começa a declaração dos elementos gráficos por meio do esquema de camadas. Para ajuda acesse o [cartão de referência de visualização de dados com o {ggplot2}](https://raw.githubusercontent.com/rstudio/cheatsheets/master/data-visualization-2.1.pdf).
Vejamos com um pouco mais de detalhes as camadas do `ggplot2` fazendo uso de um conjunto de dados que contém características de jogadores de futebol.
```{r, message=FALSE}
library(tidyverse)
# Caminho para o arquivo na WEB.
url <- "http://leg.ufpr.br/~walmes/data/euro_football_players.txt"
# Leitura com `readr`.
tb <- read_tsv(file = url,
col_names = TRUE,
quote = "",
comment = "#")
tb <- tb %>%
mutate(position = str_replace(pos, "^([A-Z]+).*", "\\1"))
```
---
## Camada 1: dados
Na primeira camada informamos ao `ggplot2` quais são nossos dados. Na função `ggplot()` utiliza-se o argumento `data` para declarar o conjunto de dados armazenado em um `data.frame`.
```{r, eval=FALSE}
ggplot(data = tb)
```
---
## Camada 2: mapeamento em variáveis visuais
Para esta camada devemos nos atentar ao tipo de valor/objeto. Em nosso conjunto de dados, uma variável de interesse pode ser:
- Quantitativa: variável numérica discreta ou contínua.
- Qualitativa: variável categórica nominal ou ordinal.
- Cronológica: variável de data ou data-tempo.
- Geográfica: objetos como polígonos, por exemplo.
Precisamos entender as variáveis pois na segunda camada declaramos quais variáveis temos interesse em representar e de que forma: haverá uma variável no eixo x? Uma no eixo y? Usaremos tamanhos distintos para níveis de um determinado fator? Ou cores? Ou formas? E assim por diante.
Para declarar estas características utilizamos na função `ggplot()` o argumento mapping e, dentro deste argumento, a função `aes()` possui os argumentos: x, y, size, shape, linetype, color, fill e alpha. Utilizando estes argumentos podemos passar variáveis e depois desse mapeamento decidir que forma usaremos para representar estes dados. Com nosso conjunto de dados, alguns exemplos são:
```{r, eval=FALSE}
# Declarando que a variável 'position' aparecerá no eixo x
ggplot(data = tb,
mapping = aes(x = position))
# Declarando que a variável 'cm' aparecerá no eixo x
# 'kg' no eixo y com cores distintas para a variável
# 'position'
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = position))
# Declarando que a variável 'cm' aparecerá no eixo x
# 'kg' no eixo y com cores distintas para a variável
# 'position' e tamanhos distintos para a variável 'age'
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = position,
size = age
))
```
É importante notar que nestas etapas ainda não temos como um output um gráfico, ainda estamos na etapa de declaração de dados e variáveis. Começamos a ter saídas quando definimos o que fazer com a próxima camada: geometrias.
---
## Camada 3: geometrias
Neste ponto, já com os dados e variáveis devidamente declarados, devemos decidir de que forma representar os dados. O pacote `ggplot2` possui uma lista considerável de geometrias disponíveis por meio de funções que complementam as informações que declaramos anteriormente. Todas as funções de geometria contam com o prefixo "geom_". Os mais usados são `geom_bar()`, `geom_boxplot()`, `geom_density()`, `geom_histogram()` e `geom_point()`, usados para as representações gráficas mais convencionais. Alguns exemplos utilizando nosso conjunto de dados:
```{r}
# Gráfico de barras para a variável 'position'
ggplot(data = tb,
mapping = aes(x = position)) +
geom_bar()
```
```{r, warning=FALSE}
# Boxplot para a variável 'cm'
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_boxplot()
```
```{r, warning=FALSE}
# Gráfico de densidade para a variável 'cm'
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_density()
```
```{r, warning=FALSE, message=FALSE}
# Histograma da variável 'cm'
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_histogram()
```
```{r, warning=FALSE}
# Gráfico de dispersão 'kg' em função de 'cm' com cores distintas
# para 'position'
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = position)) +
geom_point()
```
```{r, warning=FALSE}
# Boxplots de 'cm' para os níveis de 'country'
ggplot(data = tb,
mapping = aes(x = country,
y = cm)) +
geom_boxplot()
```
---
## Camada 4: divisão em facetas
Em algumas situações podemos estar interessados em dividir nossa representação para níveis de uma variável. Nestes casos utilizamos a divisão em facetas. Para esta tarefa o ggplot2 possui as funções `facet_grid()`, `facet_null()` e `facet_wrap()`.
```{r, warning=FALSE}
# Gráfico de dispersão de 'kg' em função de 'cm' facetado por
# 'position'
ggplot(data = tb,
mapping = aes(x = cm,
y = kg)) +
geom_point() +
facet_wrap(~position)
```
```{r, warning=FALSE}
# Histograma da variável 'cm' facetado por 'position'
ggplot(data = tb,
mapping = aes(x = cm)) +
facet_grid(facets = position ~ .) +
geom_density(fill = "orange")
```
---
## Camada 5: estatística
A partir da camada de geometrias em diante já temos uma representação gráfica em mãos, a partir daí o que fazemos são ajustes finos e inclusões de elementos extra que podem trazer alguma informação a mais que seja de interesse. Neste ponto entram as estatísticas. As funções disponíveis para a camada estatística tem o prefixo "stat_".
---
## Camada 6: coordenadas
---
## Camada 7: tema
---
# Considerações finais
A análise exploratória de dados está presente em todos os projetos de ciência de dados.
Ela serve para tirar impressões iniciais dos dados como a distribuição das variáveis, a relação entre elas, problemas com valores atípicos, etc.
Uma boa análise exploratória subsidia o levantamento de hipóteses, as decisões de negócio, a engenharia de características e a construção e validação de modelos.
Dominar ferramentas para uma análise exploratória ágil é importante para celeridade dos projetos e ganho de conhecimento.
O R é extraordinário em termos de visualização com vários pacotes e frameworks para visualização de dados.
Dispõe ainda de inúmeros recursos para a visualização interativa.
ggplot é altamente customizável e é realmente muito difícil lembrar de todas as funcionalidades, mas a documentação e os materiais web estão aí para serem consultados e o que realmente importa é o modelo mental. Tendo o objetivo claro em mente, muito provavelmente existe uma forma de criar esta saída no ggplot desde que faça sentido.
MOSTRAR UM GRÁFICO COM ALTO NIVEL DE CUSTOMIZAÇÃO
---
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_ecdf()
tb
cm
stat_ecdf
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_ecdf()
knitr::opts_chunk$set(echo = TRUE,
fig.align='center')
?stat_ecdf()
pl_ecdf <-
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_ecdf() +
stat_function(fun = pnorm,
args = list(mean = m, sd = s),
color = "magenta") +
geom_rug()
pl_boxplot <-
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_boxplot() +
geom_rug()
ggplot(data = tb,
mapping = aes(x = cm)) +
stat_boxplot() +
geom_rug()
ggplot(data = tb,
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb,
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
tb_gols <- tb %>%
group_by(team) %>%
summarise_at("goal", mean, na.rm = TRUE) %>%
mutate(team = reorder(team, goal))
tb_gols
ggplot(data = tb_gols,
mapping = aes(x = team, y = goal)) +
geom_col() +
coord_flip()
ggplot(data = tb,
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb[1:10,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb[1:10,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb[1:100,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
tb$team
unique(tb$team)
tb$team
ggplot(data = tb[1:973,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb[1:518,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
coord_flip()
ggplot(data = tb[1:518,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb[1:348,],
mapping = aes(x = team)) +
geom_bar() +
coord_flip()
ggplot(data = tb,
mapping = aes(x = 0,
y = goal,
fill = position)) +
stat_col()
ggplot(data = tb,
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()
ggplot(data = tb,
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()+
coord_polar()
ggplot(data = tb,
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()+
coord_polar(theta = 'y')
ggplot(data = tb,
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col(color = 'black')+
coord_polar(theta = 'y')
ggplot(data = tb[1:348,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col(color = 'black')+
coord_polar(theta = 'y')
ggplot(data = tb[1:100,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col(color = 'black')+
coord_polar(theta = 'y')
ggplot(data = tb[1:100,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()+
coord_polar(theta = 'y')
ggplot(data = tb[1:348,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()+
coord_polar(theta = 'y')
ggplot(data = tb[1:348,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col(col=2)+
coord_polar(theta = 'y')
ggplot(data = tb[1:348,],
mapping = aes(x = 0,
y = goal,
fill = position)) +
geom_col()+
coord_polar(theta = 'y')
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = age
# size = age
)) +
facet_wrap(facets = ~position) +
# geom_point()
geom_jitter() +
# geom_smooth(se = FALSE) +
geom_smooth(method = "lm",
formula = y ~ poly(x,  degree = 2),
se = FALSE) +
scale_color_distiller(palette = 1, direction = 1) +
labs(x = "Altura dos jogadores (cm)",
y = "Peso dos jogadores (kg)",
color = "Idade (anos)") +
geom_text(data = tb_text,
mapping = aes(x = 170, y = 100, label = texto),
inherit.aes = FALSE)
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = age
# size = age
)) +
facet_wrap(facets = ~position) +
# geom_point()
geom_jitter() +
# geom_smooth(se = FALSE) +
geom_smooth(method = "lm",
formula = y ~ poly(x,  degree = 2),
se = FALSE) +
scale_color_distiller(palette = 1, direction = 1) +
labs(x = "Altura dos jogadores (cm)",
y = "Peso dos jogadores (kg)",
color = "Idade (anos)")
ggplot(data = tb,
mapping = aes(x = cm,
y = kg,
color = age
# size = age
)) +
facet_wrap(facets = ~position) +
# geom_point()
geom_jitter() +
# geom_smooth(se = FALSE) +
geom_smooth(method = "lm",
formula = y ~ poly(x,  degree = 2),
se = FALSE) +
scale_color_distiller(palette = 1, direction = 1) +
labs(x = "Altura dos jogadores (cm)",
y = "Peso dos jogadores (kg)",
color = "Idade (anos)") +
theme_minimal()
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_histogram(mapping = aes(y = ..density..),
bins = 20,
color = "black",
fill = "gray") +
geom_density(fill = "#ab1565", alpha = 0.2) +
stat_function(fun = dnorm,
args = list(mean = m, sd = s),
color = "magenta") +
geom_vline(xintercept = m, color = "cyan") +
geom_rug()
m <- mean(tb$cm, na.rm = TRUE)
s <- sd(tb$cm, na.rm = TRUE)
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_histogram(mapping = aes(y = ..density..),
bins = 20,
color = "black",
fill = "gray") +
geom_density(fill = "#ab1565", alpha = 0.2) +
stat_function(fun = dnorm,
args = list(mean = m, sd = s),
color = "magenta") +
geom_vline(xintercept = m, color = "cyan") +
geom_rug()
m <- mean(tb$cm, na.rm = TRUE)
s <- sd(tb$cm, na.rm = TRUE)
ggplot(data = tb,
mapping = aes(x = cm)) +
geom_histogram(mapping = aes(y = ..density..),
bins = 20,
color = "black",
fill = "gray") +
geom_density(fill = "#ab1565", alpha = 0.2) +
stat_function(fun = dnorm,
args = list(mean = m, sd = s),
color = "magenta") +
geom_vline(xintercept = m, color = "cyan") +
geom_rug() +
theme_classic()
geoms <- ls("package:ggplot2")
geoms <- ls("package:ggplot2")
ind <- grep('geoms_', geoms)
geoms[ind[]]
geoms <- ls("package:ggplot2")
geoms
ind <- grep('geom_', geoms)
geoms[ind[]]
stats <- ls("package:ggplot2")
stats <- ls("package:ggplot2")
ind <- grep('stat_', stat)
geoms[ind[]]
stats <- ls("package:ggplot2")
stats <- ls("package:ggplot2")
ind <- grep('stat_', stats)
geoms[ind[]]
coords <- ls("package:ggplot2")
coords <- ls("package:ggplot2")
ind <- grep('coord_', coords)
geoms[ind[]]
themes <- ls("package:ggplot2")
themes <- ls("package:ggplot2")
ind <- grep('theme_', themes)
geoms[ind[]]
